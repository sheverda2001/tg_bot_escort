const TelegramApi = require("node-telegram-bot-api");
const token = '7303956225:AAHjfbvRjtR39X3sM7TG-CwY67ZBwhf9SV4';
const workPanelToken = '7405132392:AAE3O66Jup-OMx7seX8GRwsCj7mZYZCo6bw';
const axios = require('axios');
const mongoose = require("mongoose");
const UserSchema = require("./models/UserSchema");
const ModelSchema = require("./models/ModelSchema");
const AllText = require("./models/Alltext");
const AllButtons = require("./models/AllButtons");
const workerUser = require("./models/UserWorkertsSchem");
const express = require("express");
const CuratorSchema = require("./models/CuratorSchema");





const app = express()
const apiCityKey = "86ce2b15e4bf10e0563d6671ba9002c3"
const dbURI = 'mongodb+srv://nsewerda04:soket775@cluster0.kkg0ems.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
const bot = new TelegramApi(token, { polling: true });
const convertRUBtoUSDTUrl = 'https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub,usd';
const convertUSDTtoBTCUrl = 'https://api.coingecko.com/api/v3/simple/price?ids=tether,bitcoin&vs_currencies=usd';
const convertUSDTtoETHUrl = 'https://api.coingecko.com/api/v3/simple/price?ids=tether,ethereum&vs_currencies=usd';
const PORT = process.env.PORT || 3000;

const ourCuratorID = 5578275445;


app.get("/", async (req, res) => {
    res.send("Work!");
})

app.listen(PORT, ()=> {
    console.log('Server has been working')
})


app.post('/webhook', express.json(), (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});




mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err))


async function convertRubToUsdt(amountInRub) {
    try {
        const response = await fetch(convertRUBtoUSDTUrl);
        const data = await response.json();
        // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ RUB
        const usdtToRubRate = data.tether.rub;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É –∏–∑ RUB –≤ USDT
        const amountInUsdt = amountInRub / usdtToRubRate;
        return amountInUsdt.toFixed(3)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

async function convertUsdtToBtc(amountInUsdt) {
    try {
        const response = await fetch(convertUSDTtoBTCUrl);
        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
        if (data.tether && data.bitcoin && data.tether.usd && data.bitcoin.usd) {
            // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ USD –∏ BTC –∫ USD
            const usdtToUsdRate = data.tether.usd;
            const btcToUsdRate = data.bitcoin.usd;

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É –∏–∑ USDT –≤ BTC
            const amountInBtc = (amountInUsdt * usdtToUsdRate) / btcToUsdRate;
            return  amountInBtc.toFixed(6)
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT –∫ BTC.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

async function convertUsdtToEth(amountInUsdt) {
    try {
        const response = await fetch(convertUSDTtoETHUrl);
        const data = await response.json();

        // –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç API –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
        if (data.tether && data.ethereum && data.tether.usd && data.ethereum.usd) {
            // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ USD –∏ ETH –∫ USD
            const usdtToUsdRate = data.tether.usd;
            const ethToUsdRate = data.ethereum.usd;

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—É–º–º—É –∏–∑ USDT –≤ ETH
            const amountInEth = (amountInUsdt * usdtToUsdRate) / ethToUsdRate;
            return amountInEth.toFixed(6);
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT –∫ ETH.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}


async function checkCity(cityName) {
    const url = `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiCityKey}`;

    try {
        const response = await axios.get(url);
        if (response.status === 200) {
            return true;
        }
    } catch (error) {
        if (error.response && error.response.status === 404) {
        } else {
            console.log(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ä–æ–¥–∞: ${error.message}`);
        }
        return false;
    }
}

let userState = {};

let userInfo = {
    user_id: "",
    city: "",
    currency: "",
    user_register: false,
    current_model: 0,
    current_model_photo: 0,
    current_model_price: 0,
    date_locate: ""
}

let workerId = null;
let adminId = 6793605665;

bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const param = match[1];
    userState = {}
    userInfo = {
        user_id: "",
        city: "",
        currency: "",
        user_register: false,
        current_model: 0,
        current_model_photo: 0,
        current_model_price: 0,
        date_locate: ""
    }
    const find_user = await UserSchema.findOne({user_id: msg.from.id});
    if (find_user) {
        userInfo.user_id = find_user.user_id
        userInfo.city = find_user.city
        userInfo.currency = find_user.currency
        userInfo.user_register = true
        await bot.sendPhoto(chatId, "images/main_photo.jpg", {
            caption: AllText.main_text,
            parse_mode: 'HTML',
            ...AllButtons.main_button
        });
        workerId = find_user.workerId;
        userState[chatId] = { step: 'main_menu' };



    } else if (!find_user) {
        await bot.sendMessage(chatId, AllText.welcome_text, { parse_mode: 'HTML', ...AllButtons.welcome_button });
        userInfo.user_id = msg.from.id
        workerId = param;
        userState[chatId] = { step: 'rules' };

    }
    try {
        if (msg.from.username) {
            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                chat_id: workerId,
                text: `‚ÑπÔ∏è –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id})\n\n` +
                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
            })
        } else {
            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                chat_id: workerId,
                text: `‚ÑπÔ∏è –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id})\n\n` +
                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
            })
        }

    } catch (e) {
        console.log(e)
    }
});

// bot.onText(/\/add_model/, async (msg) => {
//     const chatId = msg.chat.id;
//     await bot.sendMessage(chatId, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—é –º–æ–¥–µ–ª—å")
//     const model = new ModelSchema({
//         name: "–ö—Ä–∏—Å—Ç–∏–Ω–∞",
//         age: "21",
//         price: {
//             hour: 6300,
//             two_hours: 11025,
//             all_night: 17460
//         },
//         photos: [
//             "images/models_img/—Åhristina/1.jpg",
//             "images/models_img/—Åhristina/2.jpg",
//             "images/models_img/—Åhristina/3.jpg",
//             "images/models_img/—Åhristina/4.jpg",
//         ],
//         description: "‚ù§Ô∏è–ü—Ä–∏–≥–ª–∞—à–∞—é –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –º–∏—Ä –ø–æ—Ö–æ—Ç–∏ –∏ —Ä–∞–∑–≤—Ä–∞—Ç–∞...‚ù§Ô∏è",
//         services: "–ö–ª–∞—Å—Å–∏–∫–∞, –∞–Ω–∞–ª, –≥—Ä–æ–ø–æ–≤–æ–π (–¥–æ–ø–ª–∞—Ç–∞), –ª–µ—Å–±–∏–π—Å–∫–∏–π. –ú–∞—Å—Å–∞–∂ ‚Äì —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π. –ú–∏–Ω–µ—Ç - —Å —Ä–µ–∑–∏–Ω–∫–æ–π, –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏. –û–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞ –ª–∏—Ü–æ, –≥—Ä—É–¥—å"
//     })
//     await model.save()
//
// })


bot.on('callback_query', async (msg) => {
    const chatId = msg.message.chat.id;

    try {
        if (msg.data === "accept_rules" && userState[chatId]?.step === 'rules') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendMessage(chatId, AllText.city_text, { parse_mode: 'HTML' });
            userState[chatId].step = 'city';
        } else if ((['RUB', 'KZT', 'UAH'].includes(msg.data) && userState[chatId]?.step === 'currency') || msg.data === "main_menu") {
            if (!(msg.data === "main_menu")) {
                const selectedCurrency = msg.data;
                userInfo.currency = msg.data;
                await bot.sendMessage(chatId, `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ ${selectedCurrency}`);
            } else if (msg.data === "main_menu") {
                if (msg.message.message_id) {
                    await bot.deleteMessage(chatId, msg.message.message_id);
                }
            }
            console.log(userInfo)
            const find_user = await UserSchema.findOne({user_id: msg.from.id});
            if (!userInfo.user_register && !find_user) {
                console.log(workerId)
                const user = new UserSchema({
                    user_id: userInfo.user_id,
                    city: userInfo.city,
                    currency: userInfo.currency,
                    workerId: workerId
                });
                await user.save()
                await bot.sendMessage(chatId, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                userInfo.user_register = false;
            }
            await bot.sendPhoto(chatId, "images/main_photo.jpg", {
                caption: AllText.main_text,
                parse_mode: 'HTML',
               ...AllButtons.main_button
            });
            userState[chatId].step = 'main_menu';
        } else if (msg.data === "city") {
            const text_currency = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:";
            await bot.sendMessage(chatId, text_currency, { parse_mode: 'HTML', ...AllButtons.currency_button });
            userState[chatId].step = 'currency';
        } else if (msg.data === "profile" && userState[chatId]?.step === 'main_menu') {
            const user = await UserSchema.findOne({user_id: msg.from.id})
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            const profile_info =
                "<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b>\n\n" +
                `‚ùï –í–∞—à ID - ${msg.from.id}\n\n` +
                `üèôÔ∏è –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ - ${userInfo.city}\n\n` +
                "üóÇ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ - 0\n" +
                "‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - 0\n" +
                `üîÆ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - ${models.length}\n`;
            await bot.deleteMessage(chatId, msg.message.message_id);
            if (user.city_change) {
                await bot.sendPhoto(chatId, "images/profile.jpg", {
                    caption: profile_info,
                    parse_mode: 'HTML',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "üíµ –í–∞–ª—é—Ç–∞", callback_data: "currency_change"}],
                            [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "main_menu" }],
                        ]
                    })
                });
            } else {
                await bot.sendPhoto(chatId, "images/profile.jpg", {
                    caption: profile_info,
                    parse_mode: 'HTML',
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "üíµ –í–∞–ª—é—Ç–∞", callback_data: "currency_change"}],
                            [{text: "üèô –ì–æ—Ä–æ–¥", callback_data: `city_change`}],
                            [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "main_menu" }],
                        ]
                    })
                });
            }
            userState[chatId].step = 'profile';
        } else if ((msg.data === "models" && userState[chatId]?.step === 'main_menu') || msg.data === "next_model" || msg.data === "previous_models" || msg.data === "next_model_photo" || msg.data === "previous_model_photo") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            if (msg.data === "models") {
                userInfo.current_model_photo = 0;
                userInfo.current_model = 0;
            }
            if (msg.data === "previous_models") {
                userInfo.current_model = userInfo.current_model-1;
                userInfo.current_model_photo = 0;
            }
            if (msg.data === "next_model_photo") {
                if (models[userInfo.current_model].photos.length-1 > userInfo.current_model_photo) {
                    userInfo.current_model_photo = userInfo.current_model_photo + 1;
                }
            }
            if (msg.data === "next_model") {
                if (models.length-1 > userInfo.current_model) {
                    userInfo.current_model = userInfo.current_model+1;
                    userInfo.current_model_photo = 0;
                }
            }
            if (msg.data === "previous_model_photo") {
                userInfo.current_model_photo = userInfo.current_model_photo -1;
            }
            let  model_text =
                `ü¶ã <b>${models[userInfo.current_model].name} (${userInfo.city})</b>\n\n` +
                `<b>–í–æ–∑—Ä–∞—Å—Ç ${models[userInfo.current_model].age}</b>\n\n` +
                `üåá –ß–∞—Å ‚Äî ${models[userInfo.current_model].price.hour} RUB\n` +
                `üèô 2 —á–∞—Å–∞ ‚Äî ${models[userInfo.current_model].price.two_hours} RUB\n` +
                `üåÉ –ù–æ—á—å ‚Äî ${models[userInfo.current_model].price.all_night} RUB\n\n` +
                `${models[userInfo.current_model].description}\n\n` +
                `<b>–£—Å–ª—É–≥–∏:</b>\n` +
                `${models[userInfo.current_model].services}`
            await bot.sendPhoto(chatId, models[userInfo.current_model].photos[userInfo.current_model_photo], {
                caption: model_text,
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "üî• –ó–∞–∫–∞–∑–∞—Ç—å", callback_data: "order_model"}],
                        [{text: "üì® –ù–∞–ø–∏—Å–∞—Ç—å", callback_data: "send_letter"}],
                        // [{text: "üíû –û—Ç–∑—ã–≤—ã", callback_data: "reviews_model"}],
                        userInfo.current_model_photo === models[userInfo.current_model].photos.length-1 ? [{text: "üì∏ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ", callback_data: "previous_model_photo"}] : userInfo.current_model_photo > 0 ?  [{text: "üì∏ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ", callback_data: "previous_model_photo"}, {text: "üì∏ –°–ª–µ–¥—É—â–µ–µ —Ñ–æ—Ç–æ", callback_data: "next_model_photo"}] : [{text: "üì∏ –°–ª–µ–¥—É—â–µ–µ —Ñ–æ—Ç–æ", callback_data: "next_model_photo"}],
                        userInfo.current_model === models.length-1 ? [{text: "‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data: "previous_models"}]: userInfo.current_model > 0 ? [{text: "‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data: "previous_models"}, {text: "–°–ª–µ–¥—É—â–∞—è ‚û°", callback_data: "next_model"}] : [{text: "–°–ª–µ–¥—É—â–∞—è ‚û°", callback_data: "next_model"}],
                        [{ text: "‚Ü© –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }],
                    ]
                })
            });

        } else if (msg.data === "send_letter") {
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            await bot.sendMessage(chatId, `üì§ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <b>${models[userInfo.current_model].name}.</b>`, {parse_mode: 'HTML'})
            userState[chatId] = {
                step: "send_letter",
                model: models[userInfo.current_model].name
            }
        } else if (msg.data === "information" && userState[chatId]?.step === 'main_menu') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendPhoto(chatId, "images/main_photo.jpg", {
                caption: AllText.inform_text,
                parse_mode: 'HTML',
                ...AllButtons.information_buttons
            });
        } else if (msg.data === "support" && userState[chatId]?.step === 'main_menu') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendPhoto(chatId, "images/support.jpg", {
                caption: AllText.support_text,
                parse_mode: 'HTML',
                ...AllButtons.support_button
            });
        } else if (msg.data === "city_change" && userState[chatId]?.step === 'profile') {
            await bot.deleteMessage(chatId, msg.message.message_id)
            await bot.sendMessage(chatId, "<b>üåÜ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:\n\n</b><em><b>–í–Ω–∏–º–∞–Ω–∏–µ!!!</b> –ì–æ—Ä–æ–¥ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!</em>", {parse_mode: 'HTML', ...AllButtons.city_change_buttons})
            userState[chatId] = { step: 'main_menu', step_add: "city_change"};
        } else if (msg.data === "currency_change" && userState[chatId]?.step === 'profile') {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendMessage(chatId, "<b>üí≤ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ—é –≤–∞–ª—é—Ç—É:</b>", {parse_mode: 'HTML', ...AllButtons.currency_button});
            userState[chatId] = { step: 'main_menu', step_add: "currency_change"};
        } else if (['RUB', 'KZT', 'UAH'].includes(msg.data) && userState[chatId]?.step === 'main_menu' && userState[chatId]?.step_add === 'currency_change') {
            const selectedCurrency = msg.data;
            userInfo.currency = msg.data;
            await bot.deleteMessage(chatId, msg.message.message_id)
            await UserSchema.updateOne({user_id: msg.from.id}, {$set: {
                    currency: msg.data
                }});
            await bot.sendMessage(chatId, `‚úÖ –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ ${selectedCurrency}`, {parse_mode: 'HTML', ...AllButtons.currency_change_return_button});

        } else if (msg.data ==="order_model") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            const models = await ModelSchema.find()
            console.log(userInfo)
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            try {
                if (msg.from.username) {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) –Ω–∞–∂–∞–ª –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å\n` +
                            `‚îî –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                } else {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) –Ω–∞–∂–∞–ª –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å\n` +
                            `‚îî –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                }
            } catch (e) {
                console.log(e)
            }
            await bot.sendPhoto(chatId, models[userInfo.current_model].photos[userInfo.current_model_photo], {
                caption: "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –º–æ–¥–µ–ª—å:</b>",
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: `üåÜ –ß–∞—Å - ${models[userInfo.current_model].price.hour} RUB`, callback_data: "order_one_hour"}],
                        [{text: `üèô 2 —á–∞—Å–∞ - ${models[userInfo.current_model].price.two_hours} RUB`, callback_data: "order_two_hours"}],
                        [{text: `üåÉ –ù–æ—á—å - ${models[userInfo.current_model].price.all_night} RUB`, callback_data: "order_all_night"}],
                    ]
                })
            })
        } else if (msg.data === "order_one_hour" || msg.data === "order_two_hours" ||  msg.data === "order_all_night") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            if (msg.data === "order_one_hour") {
                userInfo.current_model_price = models[userInfo.current_model].price.hour
            }
            if (msg.data === "order_two_hours") {
                userInfo.current_model_price = models[userInfo.current_model].price.two_hours
            }
            if (msg.data === "order_all_night") {
                userInfo.current_model_price = models[userInfo.current_model].price.all_night
            }
            await bot.sendPhoto(chatId, models[userInfo.current_model].photos[userInfo.current_model_photo], {
                caption: "<b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: </b>",
                parse_mode: 'HTML'
            })
            userState[chatId] = {step: 'locate_of_date'};
        } else if (msg.data === "pay_by_card") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendPhoto(chatId, "images/pay_method.jpg", {
                caption: "<em><b>üî∏ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b></em>\n\n" +
                `<em>–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ${userInfo.current_model_price+1} RUB –≤–º–µ—Å—Ç–æ ${userInfo.current_model_price} RUB.</em>\n\n` +
                `<em>–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.</em>`,
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω ‚úÖ", callback_data: "agree_card_rules"}],
                    ]
                })
            })
        } else if (msg.data === "agree_card_rules") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }

            const user = await workerUser.findOne({id_user: workerId})
            const curators = await CuratorSchema.find()
            let added_curator = false;
            curators.forEach(curator => {
                curator.users.forEach(user => {
                    if (user.id_user === msg.from.id) {
                        added_curator = true;
                        userState.curator = curator
                    }
                })
            })
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user?.friend_invitation)
            try {
                if (msg.from.username) {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                            `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                            `‚îî –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                } else {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                            `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                            `‚îî –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                }

                if (added_curator) {
                    if (msg.from.username) {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        }
                    } else {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                    ]
                                }
                            })
                        }
                    }
                } else if (added_curator === false) {
                    if (msg.from.username) {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                    ]
                                }
                            })
                        }
                    } else {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                    ]
                                }
                            })
                        }
                    }
                }
            } catch (e) {
                console.log(e)
            }
            await bot.sendPhoto(chatId, "images/pay_method.jpg", {
                caption: "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>\n\n" +
                    `–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n`,
                    parse_mode: 'HTML',
            })
            userState = {}
        } else if (msg.data === "pay_by_crypto") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendPhoto(chatId, "images/pay_method.jpg", {
                caption: "<b>–í—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ–±–Ω–æ—é –¥–ª—è –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: </b>",
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "‚ô¶ USDT", callback_data: "pay_by_usdt"}],
                        [{text: "üî∏ BTC", callback_data: "pay_by_btc"}],
                        [{text: "üîπETH", callback_data: "pay_by_eth"}],
                    ]
                })
            })
            userState[chatId].step = "pay_by_crypto"
        } else if (msg.data === "pay_by_usdt" || msg.data === "pay_by_btc" || msg.data === "pay_by_eth") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            const models = await ModelSchema.find()
            const adminUser = await workerUser.findOne({id_user: workerId})
            if (adminUser?.escort_model.length > 0) {
                adminUser.escort_model.forEach(item => {
                    models.unshift(item)
                })
            }
            const user = await workerUser.findOne({id_user: workerId})
            await bot.sendPhoto(chatId, "images/pay_method.jpg", {
                caption: "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>\n\n" +
                    `–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n`,
                parse_mode: 'HTML',
            })
            let crypto_currency = "USDT"
            if (msg.data === "pay_by_btc") {
                crypto_currency =  "BTC"
            } else if (msg.data === "pay_by_eth") {
                crypto_currency = "ETH"
            }
            userState = {}
            const curators = await CuratorSchema.find()
            let added_curator = false;
            curators[0].users.forEach(user => {
                if (user.id_user === msg.from.id) {
                    added_curator = true;
                }
            })

            try {
                if (msg.from.username) {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                            `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                            `‚îî –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                } else {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                            `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                            `‚îî –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                }
                if (added_curator) {
                    if (msg.from.username) {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                    ]
                                }
                            })
                        }
                    } else {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*60} RUB\n` +
                                    `‚îî –î–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ${(userInfo.current_model_price/100)*20} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä—É', callback_data: `transfer_money_${userState.curator.id_user}` }],
                                    ]
                                }
                            })
                        }
                    }
                } else if (added_curator === false) {
                    if (msg.from.username) {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                    ]
                                }
                            })
                        }
                    } else {
                        if (user?.friend_invitation) {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îú –î–æ–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${(userInfo.current_model_price/100)*3} RUB\n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—É', callback_data: `transfer_money_${user?.friend_invitation}` }],
                                    ]
                                }
                            })
                        } else {
                            await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                                chat_id: adminId,
                                text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n` +
                                    `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                                    `‚îú –í–æ—Ä–∫–µ—Ä: @${user.user_name} (ID: ${user.id_user}) \n` +
                                    `‚îú –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: ${userInfo.date_locate} \n` +
                                    `‚îú –û–ø–ª–∞—Ç–∞: ${crypto_currency} \n` +
                                    `‚îú –¶–µ–Ω–∞: ${userInfo.current_model_price} RUB \n` +
                                    `‚îî –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ${(userInfo.current_model_price/100)*80} RUB\n\n` +
                                    `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                                    `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                                    `‚îî –ë–æ—Ç: @MeganModelsEscortBot`,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üí≤ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä—É', callback_data: `transfer_money_${user.id_user}` }],
                                    ]
                                }
                            })
                        }
                    }
                }
            } catch (e) {
                console.log(e)
            }
        } else if (msg.data === "payment_problem") {
            await bot.deleteMessage(chatId, msg.message.message_id);
            await bot.sendPhoto(chatId, "images/pay_method.jpg", {
                caption: '<b>üìù –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ</b>\n\n' +
                    "–°–ª—É—á–∞—é—Ç—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –±–∞–Ω–∫–∏ –Ω–µ –¥–∞—é—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n\n" +
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —É –≤–∞—Å, —á—Ç–æ–±—ã –º—ã –∑–∞–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
                parse_mode: 'HTML',
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ", callback_data: "agree_card_rules"}],
                    ]
                })
            })
        }
    } catch (error) {
        if (error.response && error.response.status === 400 && error.response.data.description.includes("message to delete not found")) {
            console.log(`Message to delete not found: ${msg.message.message_id}`);
        } else {
            console.error(`Error handling callback query: ${error.message}`);
        }
    }
});

bot.on('callback_query', async (query) => {
    try {
        const { id, data } = query;

        if (data === 'pay_by_cash') {
            await bot.answerCallbackQuery(id, {
                text: '–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ —É –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤!',
                show_alert: true
            });        }
    } catch (error) {
        console.error('Error handling callback query:', error);
        if (error.message.includes('query is too old')) {
            await bot.answerCallbackQuery(query.id, '–û—à–∏–±–∫–∞.');
        }
    }
});


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    console.log(userState[chatId]?.step, "message")
    if (userState[chatId]?.step === 'city') {
        userState[chatId].city = msg.text;
        const rightCity = await checkCity(msg.text);
        if (rightCity) {
            userInfo.city = msg.text
            const text_currency = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:";
            await bot.sendMessage(chatId, `‚úÖ –ì–æ—Ä–æ–¥ ${msg.text} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            try {
                if (msg.from.username) {
                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è–ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ ${msg.text}\n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                } else {

                    await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                        chat_id: workerId,
                        text: `‚ÑπÔ∏è–ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ ${msg.text}\n\n` +
                            `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                            `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                            `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                    })
                }
            } catch (e) {
                console.log(e)
            }
            await bot.sendMessage(chatId, text_currency, {parse_mode: 'HTML', ...AllButtons.currency_button});
            userState[chatId].step = 'currency';
        } else {
            await bot.sendMessage(chatId, "<b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b> –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ", {parse_mode: 'HTML'});
            userState[chatId].step = 'city';
        }
    } else if (userState[chatId]?.step_add === 'city_change') {
        userInfo.city = msg.text
        let rightCity = await checkCity(msg.text);
        if (rightCity) {
            const user = await UserSchema.updateOne({user_id: msg.from.id}, {$set: {
                    city: msg.text,
                    city_change: true
                }});
            await bot.sendMessage(chatId, `‚úÖ –ì–æ—Ä–æ–¥ ${msg.text} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, {parse_mode: 'HTML', ...AllButtons.city_change_buttons_complete});
            userState[chatId].step = 'main_manu';
            userState[chatId].step_add = '';
        } else  {
            await  bot.sendMessage(chatId, "<b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b> –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: ", { parse_mode: 'HTML'});
            userState[chatId].step = 'main_manu';
        }
    } else if (userState[chatId]?.step === 'locate_of_date') {
        userInfo.date_locate = msg.text;
        await bot.sendPhoto(chatId, "images/pay_method.jpg", {
            caption: "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b>",
            parse_mode: 'HTML',
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "üíµ –û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data: "pay_by_cash"}],
                    [{text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å—å–∫–æ–π –∫–∞—Ä—Ç–æ–π", callback_data: "pay_by_card"}],
                    [{text: "ü™ô –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data: "pay_by_crypto"}],
                ]
            })
        })
    } else if (userState[chatId]?.step === 'send_letter') {
        const models = await ModelSchema.find()
        const adminUser = await workerUser.findOne({id_user: workerId})
        if (adminUser?.escort_model.length > 0) {
            adminUser.escort_model.forEach(item => {
                models.unshift(item)
            })
        }
        try {
            if (msg.from.username) {
                await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                    chat_id: workerId,
                    text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç @${msg.from.username} (ID: ${msg.from.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
                        `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                        `‚îî –°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text} \n\n` +
                        `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                        `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                        `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                })
            } else {
                await axios.post(`https://api.telegram.org/bot${workPanelToken}/sendMessage`, {
                    chat_id: workerId,
                    text: `‚ÑπÔ∏è –ú–∞–º–æ–Ω—Ç ${msg.from.first_name} (ID: ${msg.from.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
                        `‚îú –ú–æ–¥–µ–ª—å: ${models[userInfo.current_model].name}\n` +
                        `‚îî –°–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text} \n\n` +
                        `ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n` +
                        `‚îú –°–µ—Ä–≤–∏—Å: ESCORT\n` +
                        `‚îî –ë–æ—Ç: @MeganModelsEscortBot`
                })
            }
        } catch (e) {

        }
        await bot.sendMessage(chatId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", {parse_mode: 'HTML', reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "models"}],
                ]
        })});
        userState[chatId] = {
            step: "main_menu"
        }

    }


});